use clap::{Arg, App, SubCommand};
use super::{APP_VERSION, APP_NAME};


pub fn build_cli() -> App<'static, 'static> {
    App::new(APP_NAME)
        .version(APP_VERSION)
        .author("James K. <james.kominick@gmail.com>")
        .about("Encrypted file transfer utility")
        .arg(Arg::with_name("host")
             .long("--host")
             .short("-H")
             .takes_value(true)
             .required(false)
             .help("Specify transfer host"))
        .subcommand(SubCommand::with_name("self")
                    .about("Self referential things")
                    .subcommand(SubCommand::with_name("update")
                        .about("Update to the latest binary release, replacing this binary")
                        .arg(Arg::with_name("no_confirm")
                             .help("Skip download/update confirmation")
                             .long("no-confirm")
                             .short("y")
                             .required(false)
                             .takes_value(false))
                        .arg(Arg::with_name("quiet")
                             .help("Suppress unnecessary download output (progress bar)")
                             .long("quiet")
                             .short("q")
                             .required(false)
                             .takes_value(false)))
                    .subcommand(SubCommand::with_name("bash-completions")
                        .about("Generate bash completions & output to stdout or a file if specified")
                        .subcommand(SubCommand::with_name("install")
                            .about("Installs generated bash completions")
                            .arg(Arg::with_name("path")
                                .help("Path to install bash completions at")
                                .long("path")
                                .default_value("/etc/bash_completion.d/transfer")
                                .takes_value(true)))))
        .subcommand(SubCommand::with_name("upload")
            .about("Encrypt and upload a file")
            .arg(Arg::with_name("file_path")
                 .takes_value(true)
                 .required(true)
                 .help("Path to file"))
            .arg(Arg::with_name("download_limit")
                 .takes_value(true)
                 .long("download-limit")
                 .short("d")
                 .help("Set a download limit"))
            .arg(Arg::with_name("lifespan")
                 .takes_value(true)
                 .long("lifespan")
                 .short("s")
                 .help("Set a lifespan (seconds) until the uploaded data is deleted. Defaults to 1 day")))
        .subcommand(SubCommand::with_name("download")
            .about("Download and decrypt a file")
            .arg(Arg::with_name("key")
                 .takes_value(true)
                 .required(true)
                 .help("Download key identifier"))
            .arg(Arg::with_name("out_path")
                 .short("o")
                 .long("out")
                 .takes_value(true)
                 .help("Decrypted output path. This can be a path to a file, or a path to a directory. \
                        If a directory is supplied, the original uploaded file name will be used.")))
        .subcommand(SubCommand::with_name("delete")
            .about("Delete an upload")
            .arg(Arg::with_name("key")
                 .takes_value(true)
                 .required(true)
                 .help("Upload key identifier")))
}

